#!/usr/bin/env python3
"""
Generate and post PR comment with benchmark results.
"""

import argparse
import json
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def find_latest_report():
    """Find the most recent report.json file."""
    project_root = Path(__file__).parent.parent.parent
    artifacts_dir = project_root / "artifacts"

    if not artifacts_dir.exists():
        return None

    reports = list(artifacts_dir.rglob("report.json"))
    if not reports:
        return None

    return max(reports, key=lambda p: p.stat().st_mtime)


def generate_markdown_comment(report_path: Path, api_level: int):
    """Generate markdown formatted comment for PR."""
    with open(report_path) as f:
        data = json.load(f)

    comment = "## ðŸš€ OVMobileBench E2E Test Results\n\n"
    comment += f"**Android API Level:** {api_level}\n"
    comment += "**Status:** âœ… Passed\n\n"

    if "results" in data and data["results"]:
        comment += "### Performance Metrics\n\n"
        comment += "| Model | Device | Throughput (FPS) | Latency (ms) | Configuration |\n"
        comment += "|-------|--------|------------------|--------------|---------------|\n"

        for result in data["results"]:
            config = f"{result.get('threads', 'N/A')} threads, {result.get('nireq', 'N/A')} req"
            comment += f"| {result.get('model_name', 'N/A')} "
            comment += f"| {result.get('device', 'N/A')} "
            comment += f"| {result.get('throughput', 0):.2f} "
            comment += f"| {result.get('latency_avg', 0):.2f} "
            comment += f"| {config} |\n"

        # Add summary
        throughputs = [r.get("throughput", 0) for r in data["results"]]
        if throughputs:
            comment += f"\n**Best Performance:** {max(throughputs):.2f} FPS\n"

    comment += "\n---\n"
    comment += "*Generated by OVMobileBench E2E Test*\n"

    return comment


def post_to_github(comment: str, pr_number: int):
    """Post comment to GitHub PR (when running in GitHub Actions)."""
    # This would be called by GitHub Actions using github-script action
    # For now, just print the comment
    print(comment)

    # Save to file for GitHub Actions to pick up
    with open("/tmp/pr_comment.md", "w") as f:
        f.write(comment)

    logger.info(f"Comment prepared for PR #{pr_number}")


def main():
    parser = argparse.ArgumentParser(description="Generate PR comment")
    parser.add_argument("--api", type=int, required=True, help="Android API level")
    parser.add_argument("--pr", type=int, help="PR number")

    args = parser.parse_args()

    report = find_latest_report()
    if not report:
        logger.error("No report found")
        return

    comment = generate_markdown_comment(report, args.api)

    if args.pr:
        post_to_github(comment, args.pr)
    else:
        print(comment)


if __name__ == "__main__":
    main()
